@using Microsoft.AspNetCore.Authentication
@using Notary.Configuration
@using Notary.Contract
@using Notary.Interface.Service
@using Notary.Web.ViewModels

@inject ISnackbar Snackbar
@inject NotaryConfiguration Configuration
@inject NavigationManager NavigationManager
@inject ILoginService LoginService
@inherits LayoutComponentBase

<MudThemeProvider @ref="_themeProvider" @bind-IsDarkMode="_darkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

<PageTitle>Notary</PageTitle>

<MudLayout>
    <AuthorizeView>
        <Authorized>
            <MudAppBar Fixed="true">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                @if (_darkMode)
                {
                    <MudImage Alt="Notary Logo" Src="img/notary-logo-wht.png" Height="48" />
                }
                else
                {
                    <MudImage Alt="Notary Logo" Src="img/notary-logo-blk.png" Height="48" />
                }
                <MudSpacer />
                <LoginDisplay />
            </MudAppBar>
            <MudDrawer @bind-Open="@_drawerOpen">
                <NavMenu />
            </MudDrawer>
            <MudMainContent>
                <MudContainer MaxWidth="MaxWidth.Large">
                    @Body
                </MudContainer>
            </MudMainContent>
        </Authorized>
        <NotAuthorized>
            @if (context.User.Identity.IsAuthenticated == false)
            {
                <MudContainer MaxWidth="MaxWidth.Small">
                    <MudGrid Class="mt-16">
                        <MudItem xs="12">
                            <MudPaper Elevation="3" Class="pa-4">
                                <MudStack Class="d-flex align-center flex-grow-1 gap-4">
                                    <MudItem Class="pa-2">
                                        @if (_darkMode)
                                        {
                                            <MudImage Alt="Notary Logo" Src="img/notary-logo-wht.png" />
                                        }
                                        else
                                        {
                                            <MudImage Alt="Notary Logo" Src="img/notary-logo-blk.png" />
                                        }
                                    </MudItem>
                                    <MudItem Class="pa-3">
                                        <p>
                                            Notary is a simple PKI application designed for hobbyists and curious people like me. It's not intended for any kind of
                                            enterprise quality or usage. There are solutions out there like Venafi or Microsoft Certificate Services that are enterprise-grade.
                                            The purposes is to a) relieve my boredom, b) learn about PKI, c) have an alternative to mucking about <code>OpenSSL</code>, and d)
                                            experimenting with front-end technologies.
                                        </p>
                                    </MudItem>
                                </MudStack>
                            </MudPaper>
                            <MudPaper Elevation="3" Class="pa-4 mt-4">
                                <Authenticate></Authenticate>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                </MudContainer>
            }
            else
            {
                <UnauthorizedView />
            }
        </NotAuthorized>
    </AuthorizeView>

</MudLayout>

@code {
    private bool _drawerOpen = true;
    private bool _darkMode = false;
    private bool success;
    private string[] errors = { };

    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    private MudThemeProvider? _themeProvider;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _themeProvider != null)
        {
            _darkMode = await _themeProvider.GetSystemPreference();
            await _themeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }

    private Task OnSystemPreferenceChanged(bool newValue)
    {
        _darkMode = newValue;
        StateHasChanged();
        return Task.CompletedTask;
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}
