@page "/certificates/create"
@attribute [Authorize(Roles = "NotaryAdmin,NotaryWriter")]

@using Notary
@using C=Notary.Contract
@using Notary.Interface.Service
@using Notary.Web.ViewModels
@using System.Text.RegularExpressions
@inject ICertificateService CertificateService
@inject ICertificateAuthorityService CertificateAuthorityService
@inject IDialogService DialogSvc;
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-6">
    <MudText Typo="Typo.h4">Create Certificate</MudText>
    <MudDivider Class="mb-3" />
    @if (errors.Length > 0)
    {
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
                @foreach (var error in errors)
                {
                    <MudText Color="@Color.Error">
                        @error
                    </MudText>
                }
            </MudPaper>
        </MudItem>
        <MudDivider Class="mb-3" />
    }
    @if (_isLoading)
    {
        <MudProgressLinear Indeterminate="true" Color="Color.Primary" Striped="true" Size="Size.Medium" />
    }
    <MudForm Model="@ViewModel" @ref="@form" @bind-IsValid="@success" @bind-Errors="@errors">
        <MudSelect @bind-Value="@ViewModel.CertificateAuthoritySlug" Label="Select CA"
                   HelperText="Select a Certificate Authority" Placeholder="Please Select">
            <MudSelectItem Value="@("self")">Self Signed Certificate</MudSelectItem>
            @foreach (var ca in caList)
            {
                <MudSelectItem Value="@ca.Slug">@ca.Name</MudSelectItem>
            }
        </MudSelect>

        <MudTextField @bind-Value="@ViewModel.Name" Label="Name"
                      Validation="@(new Func<string, IEnumerable<string>>(ValidateName))" Required="true"
                      RequiredError="Please enter a name"></MudTextField>
        <MudTextField @bind-Value="@ViewModel.Subject.CommonName" Label="Common Name" Required="true"
                      RequiredError="Certificates require a common name"></MudTextField>
        <MudTextField @bind-Value="@ViewModel.ExpiryLength" Label="Expiration" Required="true"
                      Validation="@(new Func<int, IEnumerable<string>>(ValidateExpiration))"
                      HelperText="Enter the expiration in months"></MudTextField>
        <MudDivider Class="my-3" />
        <MudSelect T="string" Label="Extended Key Usages" MultiSelection="true"
                   @bind-SelectedValues="ViewModel.SelectedExKeyUsages" @bind-Value="_selectedExKeyUsage">
            @foreach (var usage in ViewModel.ExtendedKeyUsages)
            {
                <MudSelectItem T="string" Value="usage.Key">@usage.Value</MudSelectItem>
            }
        </MudSelect>
        <MudDivider Class="my-3" />
        <MudSelect T="int" Label="Certificate Key Usages" MultiSelection="true"
                   @bind-SelectedValues="ViewModel.SelectedCertificateKeyUsage" @bind-Value="_selectedCertKeyUsage">
            @foreach (var usage in ViewModel.CertificateKeyUsages)
            {
                <MudSelectItem T="int" Value="usage.Key">@usage.Value</MudSelectItem>
            }
        </MudSelect>
        <MudDivider Class="my-3" />
        <MudLink OnClick="@(() => ViewModel.AdditionalSubjectExpanded = !ViewModel.AdditionalSubjectExpanded)">
            Additional Subject Properties
        </MudLink>
        <MudCollapse Expanded="ViewModel.AdditionalSubjectExpanded">
            <MudTextField @bind-Value="@ViewModel.Subject.Country" Label="Country"
                          Disabled="ViewModel.SelectedCa!=null"></MudTextField>
            <MudTextField @bind-Value="@ViewModel.Subject.Locale" Label="Locale" Disabled="ViewModel.SelectedCa!=null">
            </MudTextField>
            <MudTextField @bind-Value="@ViewModel.Subject.Organization" Label="Organization"
                          Disabled="ViewModel.SelectedCa!=null"></MudTextField>
            <MudTextField @bind-Value="@ViewModel.Subject.OrganizationalUnit" Label="Org Unit"
                          Disabled="ViewModel.SelectedCa!=null"></MudTextField>
            <MudTextField @bind-Value="@ViewModel.Subject.StateProvince" Label="State"
                          Disabled="ViewModel.SelectedCa!=null"></MudTextField>
        </MudCollapse>
        <MudDivider Class="my-3" />
        <MudLink OnClick="OnSanDialogOpenClick">Subject Alternative Names</MudLink>
        <MudGrid Spacing="1" Class="my-2">
            @foreach (var san in ViewModel.SubjectAlternativeNames)
            {
                <MudItem xs="4">
                    @san.Name
                </MudItem>
                <MudItem xs="4">
                    @san.Kind
                </MudItem>
                <MudItem xs="4">
                    <MudLink Color="Color.Error" OnClick="@(()=>OnSanDialogDeleteClick(san))" Typo="Typo.inherit">
                        <i class="fa-sharp fa-solid fa-trash"></i>
                    </MudLink>
                </MudItem>
            }
        </MudGrid>
        <MudDivider Class="my-3" />
        <MudLink OnClick="@(()=>ViewModel.KeyAlgorithmExpanded=!ViewModel.KeyAlgorithmExpanded)">
            Private Key Algorithm
        </MudLink>
        <MudCollapse Expanded="ViewModel.KeyAlgorithmExpanded">
            <MudRadioGroup @bind-Value="@ViewModel.KeyAlgorithm" Disabled="ViewModel.SelectedCa!=null">
                <MudRadio Value="@Algorithm.RSA">RSA</MudRadio>
                <MudRadio Value="@Algorithm.EllipticCurve">Elliptic Curve</MudRadio>
            </MudRadioGroup>
            <MudDivider />
            @if (ViewModel.KeyAlgorithm == Algorithm.RSA)
            {
                <MudRadioGroup @bind-Value="@ViewModel.KeySize" T="int" Disabled="ViewModel.SelectedCa!=null">
                    <MudRadio Value="@(2048)">2048 bit</MudRadio>
                    <MudRadio Value="@(3072)">3072 bit</MudRadio>
                    <MudRadio Value="@(4096)">4096 bit</MudRadio>
                </MudRadioGroup>
            }
            else if (ViewModel.KeyAlgorithm == Algorithm.EllipticCurve)
            {
                <MudRadioGroup @bind-Value="@ViewModel.Curve" T="EllipticCurve" Disabled="ViewModel.SelectedCa!=null">
                    <MudRadio Value="@(EllipticCurve.P256)">P256</MudRadio>
                    <MudRadio Value="@(EllipticCurve.P384)">P384</MudRadio>
                    <MudRadio Value="@(EllipticCurve.P521)">P521</MudRadio>
                    <MudRadio Value="@(EllipticCurve.P256K)">P256K</MudRadio>
                </MudRadioGroup>
            }
        </MudCollapse>
        <div class="d-flex align-center justify-space-between">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="OnSubmitAsync">
                Submit
            </MudButton>
        </div>
    </MudForm>
</MudContainer>

<MudDialog @bind-IsVisible="_sanDialogVisible" Options="_sanDialogOptions">
    <TitleContent>
        Subject Alternative Name
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="_sanText" Label="SAN" HelperText="Enter the Subject Alternative Name"></MudTextField>
        <MudSelect @bind-Value="_sanKind" Dense="true" T="SanKind">
            <MudSelectItem Value="@(SanKind.Dns)">DNS</MudSelectItem>
            <MudSelectItem Value="@(SanKind.Email)">E-Mail</MudSelectItem>
            <MudSelectItem Value="@(SanKind.IpAddress)">IP Address</MudSelectItem>
            <MudSelectItem Value="@(SanKind.Uri)">URI</MudSelectItem>
            <MudSelectItem Value="@(SanKind.UserPrincipal)">User Principal</MudSelectItem>
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnSanDialogCloseClick">OK</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private CreateCertificateViewModel ViewModel { get; set; } = new();
    private IEnumerable<C.CertificateAuthority> caList = new List<C.CertificateAuthority>();
    private MudForm form;
    private bool _isLoading = true;
    private int _selectedCertKeyUsage = 0;
    private string _selectedExKeyUsage = string.Empty;
    private string _sanText = string.Empty;
    private SanKind _sanKind = SanKind.Dns;
    private bool _sanDialogVisible = false;
    private DialogOptions _sanDialogOptions = new DialogOptions()
        {
            BackdropClick = false,
            CloseButton = true,
            FullWidth = true,
            MaxWidth = MaxWidth.Medium
        };

    private bool success;
    private string[] errors = { };

    protected override async Task OnInitializedAsync()
    {
        ViewModel.OnCertificateAuthoritySlugChanged += async (c) =>
        {
            if (c != null && c != "self")
            {
                _isLoading = true;
                await Task.Run(async () =>
                {
                    ViewModel.SelectedCa = await CertificateAuthorityService.GetAsync(c);
                });
                _isLoading = false;

                ViewModel.Subject.Country = ViewModel.SelectedCa.DistinguishedName.Country;
                ViewModel.Subject.Locale = ViewModel.SelectedCa.DistinguishedName.Locale;
                ViewModel.Subject.Organization = ViewModel.SelectedCa.DistinguishedName.Organization;
                ViewModel.Subject.OrganizationalUnit = ViewModel.SelectedCa.DistinguishedName.OrganizationalUnit;
                ViewModel.Subject.StateProvince = ViewModel.SelectedCa.DistinguishedName.StateProvince;

                ViewModel.KeyAlgorithm = ViewModel.SelectedCa.KeyAlgorithm;
                if (ViewModel.SelectedCa.KeyAlgorithm == Algorithm.RSA && ViewModel.SelectedCa.KeyLength.HasValue)
                    ViewModel.KeySize = ViewModel.SelectedCa.KeyLength.Value;
                else if (ViewModel.SelectedCa.KeyAlgorithm == Algorithm.EllipticCurve && ViewModel.SelectedCa.KeyCurve.HasValue)
                    ViewModel.Curve = ViewModel.SelectedCa.KeyCurve.Value;
                else
                    throw new InvalidCastException("Invalid values for either key size or key curve");
            }
            else
            {
                ViewModel.Reset();
            }
        };

        _isLoading = true;
        await Task.Run(async () =>
        {
            caList = await CertificateAuthorityService.GetAllAsync();
            caList = caList.Where(ca => ca.IsIssuer);
        });

        _isLoading = false;
    }

    private async Task OnCaListChange(string slug)
    {
        if (slug == null)
            return;

        _isLoading = true;
        ViewModel.CertificateAuthoritySlug = slug;

        if (slug == "self")
        {
            ViewModel.SelectedCa = null;
        }
        else
        {
            await Task.Run(async () =>
            {
                ViewModel.SelectedCa = await CertificateAuthorityService.GetAsync(slug);
            });
        }
        _isLoading = false;
    }

    private void OnSanDialogOpenClick() => _sanDialogVisible = true;

    private void OnSanDialogCloseClick()
    {
        var san = new C.SubjectAlternativeName
            {
                Kind = _sanKind,
                Name = _sanText
            };
        ViewModel.SubjectAlternativeNames.Add(san);

        _sanText = string.Empty;
        _sanKind = SanKind.Dns;
        _sanDialogVisible = false;
    }


    private void OnSanDialogDeleteClick(C.SubjectAlternativeName san)
    {
        ViewModel.SubjectAlternativeNames.Remove(san);
    }

    private async Task OnSubmitAsync()
    {
        await form.Validate();

        if (!success)
            return;

        DateTime notBefore = DateTime.UtcNow;
        DateTime notAfter = DateTime.UtcNow.AddMonths(ViewModel.ExpiryLength);
        TimeSpan ts = notAfter - notBefore;
        var request = new C.CertificateRequest
            {
                CertificateKeyUsageFlags = ViewModel.SelectedCertificateKeyUsage,
                IsCaCertificate = false,
                KeyAlgorithm = ViewModel.KeyAlgorithm,
                Name = ViewModel.Name,
                NotAfter = notAfter,
                NotBefore = notBefore,
                ExtendedKeyUsages = ViewModel.SelectedExKeyUsages,
                Subject = ViewModel.Subject,
                SubjectAlternativeNames = ViewModel.SubjectAlternativeNames
            };

        if (ViewModel.KeyAlgorithm == Algorithm.RSA)
            request.KeySize = ViewModel.KeySize;
        else if (ViewModel.KeyAlgorithm == Algorithm.EllipticCurve)
            request.Curve = ViewModel.Curve;

        request.ParentCertificateSlug = ViewModel.SelectedCa != null ? ViewModel.SelectedCa.CertificateSlug : null;

        _isLoading = true;
        await Task.Run(async () => await CertificateService.IssueCertificateAsync(request));
        _isLoading = false;
        NavigationManager.NavigateTo("certificates");
    }

    private IEnumerable<string> ValidateExpiration(int months)
    {
        if (months == 0)
        {
            yield return "Please enter a value";
        }

        if (months > 0 && months < 12)
        {
            yield return "Please enter greater than 12 months";
        }

        if (ViewModel.SelectedCa != null)
        {
            DateTime notBefore = ViewModel.SelectedCa.NotBefore;
            DateTime notAfterCa = ViewModel.SelectedCa.NotAfter;
            DateTime notAfterCert = DateTime.UtcNow.AddMonths(months);

            if (notAfterCa < notAfterCert)
            {
                yield return "Certificate validity cannot be longer than the CA validity.";
            }
        }
    }

    private IEnumerable<string> ValidateName(string name)
    {
        if (string.IsNullOrEmpty(name) || string.IsNullOrWhiteSpace(name))
        {
            yield return "Please enter a certificate name";
        }

        var regex = new Regex("[a-zA-Z0-9\\-]");
        if (!regex.IsMatch(name))
        {
            yield return "Name can only contain alphanumerics and dashes";
        }
    }
}
